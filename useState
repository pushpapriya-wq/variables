import React, { useReducer } from "react";

function appleReducer(state = 3, action) {
  switch (action.type) {
    case "ADD_APPLE":
      return state + 1;
    case "EAT_APPLE":
      return state - 1;
    default:
      return state;
  }
}

function App() {
  const [state, dispatch] = useReducer(appleReducer, 3);

  return (
    <div style={styles.container}>
      <h1 style={styles.heading}>Apple Counter</h1>
      <img
        src="https://cdn-icons-png.flaticon.com/512/415/415733.png" 
        alt="Apple"
        style={styles.appleImage}
      />
      <p style={styles.counter}>Number of apples: {state}</p>
      <div style={styles.buttonContainer}>
        <button
          style={styles.button}
          onClick={() => dispatch({ type: "ADD_APPLE" })}
        >
          ADD APPLE
        </button>
        <button
          style={styles.button}
          onClick={() => dispatch({ type: "EAT_APPLE" })}
        >
          EAT APPLE
        </button>
      </div>
    </div>
  );
}

const styles = {
  container: {
    padding: "20px",
    textAlign: "center",
    backgroundColor: "#f8f9fa",
    borderRadius: "15px",
    width: "300px",
    margin: "50px auto",
    boxShadow: "0 4px 8px rgba(0,0,0,0.1)",
  },
  heading: {
    color: "#333",
  },
  appleImage: {
    width: "50px",
    height: "50px",
    marginBottom: "10px",
  },
  counter: {
    fontSize: "18px",
    fontWeight: "bold",
  },
  buttonContainer: {
    display: "flex",
    justifyContent: "center",
    gap: "10px",
    marginTop: "15px",
  },
  button: {
    padding: "12px 20px",
    borderRadius: "50%",
    border: "none",
    backgroundColor: "#ff4757",
    color: "white",
    cursor: "pointer",
    fontWeight: "bold",
    transition: "background 0.3s ease",
  },
};

export default App;

useState: change the state, React will render the component and update the UI with the new element
useRef: changing the value by using useRed doesnot re-render stays the same even the value is updated
use Ref: when you change the value stored in ref.current
-- it doesnot make the component render
-- this is useful when you need to store values or interact with Dom elements with out extra renders
commonly used:
1 Accessing a Dom element: like scrolling to screen
focusing the input
2 storing values: keep track of values that dont need to update the UI but need to remember the previous state
